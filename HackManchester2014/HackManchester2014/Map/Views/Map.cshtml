@{
    Layout = "Shared/_Layout.cshtml";
}
@using HackManchester2014.Map.Models
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<HackManchester2014.Map.Models.MapHomeViewModel>

@helper LoadNominations(MapDonation donation, bool isLast)
{
    <text>
        animatePath(map, @Html.Raw(donation.DonationGeoJson), @Html.Raw(donation.NominationsGeoJson))
        setTimeout(function() {
            @for (int i = 0; i < donation.Nominations.Count; i++)
            {
                <text>loadPoints(map, @Html.Raw(donation.DonationGeoJson))</text>
                @LoadNominations(donation.Nominations[i], donation.Nominations.Count - 1 == i)
            }
            @if (isLast)
            {
                <text>
                    map.fitBounds([[minLat, minLng],[maxLat, maxLng]], [5,5]);
                    map.setView([@Model.Donation.Location.Latitude, @Model.Donation.Location.Longitude]);
                </text>
            }

    }, 5000);
</text>
}

<div id='map-wrapper'>
    <div id='map'></div>
</div>

<script type="text/javascript">
    $(function () {
        L.mapbox.accessToken = 'pk.eyJ1IjoibWFjc2RpY2tpbnNvbiIsImEiOiI3R2FLei1jIn0.As3Ni9FK_IkYl6V4rVsubA';

        var maxLat = -180;
        var maxLng = -180;
        var minLat = 180;
        var minLng = 180;
        var markers = [];

        map = L.mapbox.map('map', 'examples.map-20v6611k', {
            attributionControl: false,
            infoControl: true
        });

        map.setView([@Model.Donation.Location.Latitude, @Model.Donation.Location.Longitude], 18);

        //map.dragging.disable();
        //map.touchZoom.disable();
        //map.doubleClickZoom.disable();
        //map.scrollWheelZoom.disable();
        if (map.tap) map.tap.disable();

        // Load the data for the user
        //loadPoints(map, @Html.Raw(Model.Donation.DonationGeoJson));

        @LoadNominations(Model.Donation, true)
        map.infoControl.addInfo('<a href="http://hackman14.azurewebsites.net/">Mighty Morphin Power Hackers</a>');

        function obj(ll) { return { y: ll[0], x: ll[1] }; }

        function animatePath(map, parent, data) {
            for (var i = 0; i < data.features.length; i++) {
                var source = parent.geometry.coordinates;
                var target = data.features[i].geometry.coordinates;

                //var generator = new arc.GreatCircle(obj(source), obj(target));
                //var line = generator.Arc(100, { offset: 10 });
                //var newLine = L.polyline(line.geometries[0].coords.map(function(c) {
                //    return c.reverse();
                //}), {
                //    color: '#6FCAC5',
                //    weight: 1,
                //    opacity: 0.5
                //})
                //.addTo(map);
                //var totalLength = newLine._path.getTotalLength();
                //newLine._path.classList.add('path-start');

                //newLine._path.style.strokeDashoffset = totalLength;
                //newLine._path.style.strokeDasharray = totalLength;

                //setTimeout((function(path) {
                //    return function() {
                //        // setting the strokeDashoffset to 0 triggers
                //        // the animation.
                //        path.style.strokeDashoffset = 0;
                //    };
                //})(newLine._path), i * 100);
            }
        }
        function loadPoints(map, data) {
            var layer = L.mapbox.featureLayer(data)
                .addTo(map);

            layer.eachLayer(function(marker) {
                markers.push(marker);
                var latlng = marker.getLatLng();
                var lat = latlng.lat;
                var lng = latlng.lng;
                if (lat < minLat) {
                    minLat = lat;
                }
                if (lat > maxLat) {
                    maxLat = lat;
                }
                if (lng < minLng) {
                    minLng = lng;
                }
                if (lng > maxLng) {
                    maxLng = lng;
                }
            });
            //map.setView([@Model.Donation.Location.Latitude, @Model.Donation.Location.Longitude]);
        }

        function addPoint(map, title, description, longitude, latitude) {
            L.mapbox.featureLayer({
                // this feature is in the GeoJSON format: see geojson.org
                // for the full specification
                type: 'Feature',
                geometry: {
                    type: 'Point',
                    // coordinates here are in longitude, latitude order because
                    // x, y is the standard for GeoJSON and many formats
                    coordinates: [
                      longitude,
                      latitude
                    ]
                },
                properties: {
                    title: title,
                    description: description,
                    // one can customize markers by adding simplestyle properties
                    // https://www.mapbox.com/foundations/an-open-platform/#simplestyle
                    'marker-size': 'large',
                    'marker-color': '#6FCAC5',
                    'marker-symbol': 'star'
                }
            }).addTo(map);
        }
    })
</script>