@using HackManchester2014.Map.Models
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<HackManchester2014.Map.Models.MapViewModel>

@helper LoadNominations(MapDonation donation, bool isLast)
{
    <text>
        loadMaxLatLng(@Html.Raw(donation.NominationsGeoJson))
        animatePath(map, @Html.Raw(donation.DonationGeoJson), @Html.Raw(donation.NominationsGeoJson))
        setTimeout(function() {
            @for (int i = 0; i < donation.Nominations.Count; i++)
            {
                <text>drawPoints(map, @Html.Raw(donation.NominationsGeoJson))</text>
            }
        }, 5000);
        setTimeout(function() {
            @for (int i = 0; i < donation.Nominations.Count; i++)
            {
                @LoadNominations(donation.Nominations[i], donation.Nominations.Count - 1 == i)
            }
        }, 6000);
    </text>
}

<div id='map-wrapper'>
    <div id='map'></div>
</div>

<script type="text/javascript">
    $(function () {
        L.mapbox.accessToken = 'pk.eyJ1IjoibWFjc2RpY2tpbnNvbiIsImEiOiI3R2FLei1jIn0.As3Ni9FK_IkYl6V4rVsubA';

        var maxLat = -180;
        var maxLng = -180;
        var minLat = 180;
        var minLng = 180;

        map = L.mapbox.map('map', 'examples.map-20v6611k', {
            attributionControl: false,
            infoControl: true
        });

        map.infoControl.addInfo('<a href="http://hackman14.azurewebsites.net/">Mighty Morphin Power Hackers</a>');
        map.setView([@Model.Donation.Location.Latitude, @Model.Donation.Location.Longitude], 15);

        // Load the data for the user
        drawPoints(map, @Html.Raw(Model.Donation.DonationGeoJson));
        loadMaxLatLng(@Html.Raw(Model.Donation.NominationsGeoJson));

        @LoadNominations(Model.Donation, true)


        function obj(ll) { return { y: ll[1], x: ll[0] }; }

        function animatePath(map, parent, data) {
            for (var i = 0; i < data.features.length; i++) {
                var source = parent.geometry.coordinates;
                var target = data.features[i].geometry.coordinates;

                var generator = new arc.GreatCircle(obj(source), obj(target));
                var line = generator.Arc(500, { offset: 10 });
                var newLine = L.polyline(line.geometries[0].coords.map(function(c) {
                    return c.reverse();
                }), {
                    color: '#32A07E',
                    weight: 3,
                    opacity: 0.9
                })
                .addTo(map);
                var totalLength = newLine._path.getTotalLength();
                newLine._path.classList.add('path-start');

                newLine._path.style.strokeDashoffset = totalLength;
                newLine._path.style.strokeDasharray = totalLength;

                setTimeout((function(path) {
                    return function() {
                        // setting the strokeDashoffset to 0 triggers
                        // the animation.
                        path.style.strokeDashoffset = 0;
                    };
                })(newLine._path), i * 100);
            }
        }
        function loadMaxLatLng(data) {
            var buffer = 0.1;
            var updated = false;
            for (var i = 0; i < data.features.length; i++) {
                var latLng = data.features[i].geometry.coordinates;
                var lat = latLng[0];
                var lng = latLng[1];
                if (lat < minLat) {
                    updated = true;
                    minLat = lat - buffer;
                }
                if (lat > maxLat) {
                    updated = true;
                    maxLat = lat + buffer;
                }
                if (lng < minLng) {
                    updated = true;
                    minLng = lng - buffer;
                }
                if (lng > maxLng) {
                    updated = true;
                    maxLng = lng + buffer;
                }
            }
            if (updated === true) {
                map.fitBounds([[minLat, minLng],[maxLat, maxLng]], [10,10]);
                map.setView([@Model.Donation.Location.Latitude, @Model.Donation.Location.Longitude]);
            }
        }
        function drawPoints(map, data) {
            L.mapbox.featureLayer(data)
                .addTo(map);
        }
    })
</script>